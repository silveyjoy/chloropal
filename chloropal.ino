/*
  lcdInitialize and lcdWrite functions from: https://playground.arduino.cc/Code/PCD8544/
 */
 
//Header files
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include "digits.h"

ESP8266WiFiMulti WiFiMulti;

//Pins
#define soilPin     A0  //A0, pin for the soil moisture sensor input
#define soilPower   15  //D8, pin for soil moisture power
#define buttonPin   0   //D3, pin for reading button push
#define yellowLED   2   //D4

//lcd pins
#define lcdSCE   16  //D0
#define lcdRST   12  //D6
#define lcdDC    4   //D2
#define lcdMOSI  13  //D7
#define lcdSCL   5   //D1
#define lcdLED   14  //D5

#define LCD_C     LOW
#define LCD_D     HIGH

#define LCD_X     84
#define LCD_Y     48

char lcdArray[6][4][21] = {
  {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 0, area 0
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 0, area 1
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 0, area 2
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  //row 0, area 3
   }, 
  {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 1, area 0
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 1, area 1
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 1, area 2
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  //row 1, area 3
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 2, area 0
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 2, area 1
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 2, area 2
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  //row 2, area 3
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 3, area 0
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 3, area 1
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 3, area 2
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  //row 3, area 3
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 4, area 0
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 4, area 1
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 4, area 2
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  //row 4, area 3
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 5, area 0
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 5, area 1
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //row 5, area 2
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  //row 5, area 3
  }
};


//lcd functions
void lcdInitialize(void) {
  pinMode(lcdSCE, OUTPUT);
  pinMode(lcdRST, OUTPUT);
  pinMode(lcdDC, OUTPUT);
  pinMode(lcdMOSI, OUTPUT);
  pinMode(lcdSCL, OUTPUT);
  digitalWrite(lcdRST, LOW);
  digitalWrite(lcdRST, HIGH);
  lcdWrite(LCD_C, 0x21 );  // LCD Extended Commands.
  lcdWrite(LCD_C, 0xB1 );  // Set LCD Vop (Contrast). 
  lcdWrite(LCD_C, 0x04 );  // Set Temp coefficent. //0x04
  lcdWrite(LCD_C, 0x14 );  // LCD bias mode 1:48. //0x13
  lcdWrite(LCD_C, 0x20 );  // LCD Basic Commands
  lcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
}

void lcdWrite(byte dc, byte data) {
  digitalWrite(lcdDC, dc);
  digitalWrite(lcdSCE, LOW);
  shiftOut(lcdMOSI, lcdSCL, MSBFIRST, data);
  digitalWrite(lcdSCE, HIGH);
}

void lcdArrayClear(char displayValues[6][4][21]) {
  char row, col, byteValue;
  for (row = 1; row < 5; row++) {
    for (col = 0; col < 4; col++) {
      for (byteValue = 0; byteValue < 21; byteValue++) {
        displayValues[row][col][byteValue] = 0x00;
      };
    };
  };
}

void lcdArrayUpdate(char displayValues[6][4][21], char digitValues[4][21], char colPosition) {
  char row, byteValue;
  for (row = 1; row < 5; row++) {
    for (byteValue = 0; byteValue < 21; byteValue++) {
      displayValues[row][colPosition][byteValue] = digitValues[row-1][byteValue];
    };
  };
}

void lcdUpdate(char displayValues[6][4][21]) {
  char row, col, byteValue;
  for (row = 0; row < 6; row++){
    for (col = 0; col < 4; col++) {
      for (byteValue = 0; byteValue < 21; byteValue++) {
        lcdWrite(LCD_D, displayValues[row][col][byteValue]);
      };
    };
  };
}

//Sensor calibration mode triggered by button press
void calibrate(){
    Serial.print("Calibration mode activated!\n");
}

//Retrieve moisture reading from sensor
int readSoil() {
    digitalWrite(soilPower, HIGH); //turn D7 "On"
    delay(10); //wait 10 milliseconds 
    int val = analogRead(soilPin); //Read the SIG value form sensor 
    digitalWrite(soilPower, LOW); //turn D7 "Off"

    if (val > 850) {
      digitalWrite(yellowLED, LOW);
    }
    else {
      digitalWrite(yellowLED, HIGH);
    }
    return (val); //send current moisture value
}

void setup() {
  //Serial setup
  Serial.begin(115200);
  Serial.println();

  //Soil sensor & LED indicator setup
  pinMode(soilPin, INPUT);
  pinMode(soilPower, OUTPUT);
  pinMode(yellowLED, OUTPUT);
  pinMode(buttonPin, INPUT);
  digitalWrite(soilPower, LOW);
  digitalWrite(yellowLED, LOW);

//  Wifi setup
//  WiFi.mode(WIFI_STA);
//  WiFiMulti.addAP("NETWORK NAME", "PASSWORD");

  //lcd setup
  lcdInitialize();
  lcdUpdate(lcdArray);
  analogWrite(lcdLED, 200);
}
        
void loop() {
  delay(10000);

  //Serial.println(digitalRead(buttonPin));
  if (digitalRead(buttonPin) == LOW) {
    calibrate();
  }
  else {
    Serial.print("No calibration here!\n");
  };
  
  int reading = readSoil();  
  char numLength = log10(reading) + 1;
  char workingDigit;

  for (signed char digitPosition = (numLength - 1); digitPosition > -1; digitPosition--) {
      workingDigit = reading % 10;
      lcdArrayUpdate(lcdArray, digitArray[workingDigit], digitPosition);
      reading = reading / 10;
  };

  lcdUpdate(lcdArray);
  lcdArrayClear(lcdArray);
  
}